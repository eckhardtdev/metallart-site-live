---
import EntryGrid from '@/components/shared/EntryGrid.astro'
import type { Props as EntryGridItemProps } from '@/components/shared/EntryGridItem.astro'
import { useTranslate } from '@/i18n/utils'
import EntryLayout from '@/layouts/EntryLayout.astro'
import type { DatasourceFilter } from '@/types/filter'
import type { NewsArchiveStoryblok } from '@/types/storyblok'
import { sitesFilterQuery, sortNews } from '@/utils/metallart'
import { fetchStories, storyblokEditable } from '@/utils/storyblok'
import {
  getDatasourceByField,
  getFieldsForDatasources,
} from '@/utils/storyblok/datasource-field-mapping'
import { fetchDatasourceEntries } from '@/utils/storyblok/fetchDatasources'
import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'
import clsx from 'clsx'
import type { StoryblokStory } from 'storyblok-generate-ts'
import Button from '../shared/Button.astro'
import ProjectFilter from '../shared/ProjectFilter.astro'
import { isDevelopment } from '@/utils/env'

export type Props = {
  slug?: string
  language?: string
  alternates?: {
    [key: string]: string
  }
  story: StoryblokStory<NewsArchiveStoryblok>
  blok: NewsArchiveStoryblok
  color: string
}

const { story, blok } = Astro.props
const t = useTranslate(Astro.url)
const sbLang = story.lang

const stories =
  (await fetchStories({
    starts_with: 'global/news/',
    language: sbLang,
    // sort_by: newsSortBy,
    filter_query: {
      ...sitesFilterQuery(sbLang),
    },
  })) ?? []

const items = sortNews(stories).map(
  (story) =>
    ({
      ...story.content,
      title: story.content?.listTitle || story.content?.title,
      image: story.content?.cover?.filename
        ? story.content?.cover
        : story.content?.image,
      id: story.id,
      uuid: story.uuid,
      url: story.full_slug,
    }) as EntryGridItemProps,
)

const datasources = ['news-tags']
let filters: DatasourceFilter[] = []
for (const datasource of datasources) {
  const options = await fetchDatasourceEntries(datasource, {
    dimension: story.lang,
  })
  filters.push({
    type: 'select',
    label: t(`news_filter.${datasource}` as unknown),
    name: datasource,
    options:
      options?.map((option) => ({
        id: '',
        label: option.value as string,
        value: option.defaultValue,
      })) ?? [],
    advanced: false,
  })
}

filters = filters.map((filter) => {
  const id = filter.name

  return {
    ...filter,
    id,
    options: filter.options?.map((option) => ({
      ...option,
      id: `${id}_${option.value}`,
    })),
  }
})

// TODO: Align with ProjectArchive and consolidate code
const getFieldOptionId = (fieldName, option) => {
  return `${getDatasourceByField(fieldName)}_${option}`
}

const fields = getFieldsForDatasources(datasources)
const filterValuesWithResults = [
  ...new Set(
    items.flatMap((item) => {
      const allValues = fields.flatMap((field) => {
        const values = item[field]

        if (Array.isArray(values)) {
          return values.map((value) => getFieldOptionId(field, value))
        } else {
          return getFieldOptionId(field, values)
        }
      })
      return allValues
    }),
  ),
]
const filterWithResults = filters.map((filter) => {
  const options = filter.options?.filter((option) => {
    const id = option.id
    const hasResult = filterValuesWithResults.includes(id)
    return hasResult
  })

  return {
    ...filter,
    options,
  }
})

const entries = items.map((item) => {
  const entry = {
    id: item.id + '',
    filters: fields.flatMap((field) => {
      const values = item[field]
      if (Array.isArray(values)) {
        return values.map((value) => getFieldOptionId(field, value))
      } else {
        return getFieldOptionId(field, values)
      }
    }),
  }
  return entry
})
---

<EntryLayout story={story} {...storyblokEditable(blok)}>
  <main>
    {
      blok.bodyBefore?.map((sectionBlok) => (
        <StoryblokComponent blok={sectionBlok} />
      ))
    }
    {
      isDevelopment() && (
        <div>
          <table>
            <tr>
              <th class="pr-10 text-left font-bold">Year</th>
              <th class="pr-10 text-left font-bold">Sort by date</th>
              <th class="pr-10 text-left font-bold">Published at</th>
              <th class="pr-10 text-left font-bold">Created at</th>
            </tr>
            {stories?.map((story) => (
              <tr>
                <td class="pr-10">{story.content?.date}</td>
                <td class="pr-10">{story.sort_by_date}</td>
                <td class="pr-10">{story.published_at}</td>
                <td class="pr-10">{story.created_at}</td>
              </tr>
            ))}
          </table>
        </div>
      )
    }
    <div
      x-data={`entrygrid({items: ${JSON.stringify(entries)}, type:'news'})`}
      class={clsx('area relative mt-md grid gap-y-10')}
    >
      <ProjectFilter
        variant="news"
        initialNumItems={items.length}
        filters={filterWithResults}
        class="area-content mb-10"
      />
      <EntryGrid
        items={items}
        variant="square-columns"
        class="area-wide"
        usesAlpine={true}
      />
      <div class="area-wide" x-show="filtered && !filteredResults?.length">
        <p class="text-20 text-center leading-150 md:text-24">
          {t('news_filter.noresult_message')}
        </p>
        <div class="mt-5 text-center">
          <Button
            x-on:click="useClosestMatchFilters()"
            preset="secondary-dark"
            type="button"
            as="button"
          >
            {t('news_filter.find_closest_match')}
          </Button>
        </div>
      </div>
    </div>
    {
      blok.bodyAfter?.map((sectionBlok) => (
        <StoryblokComponent blok={sectionBlok} />
      ))
    }
  </main>
</EntryLayout>
