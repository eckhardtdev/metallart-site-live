---
import {
  fetchAllLinks,
  fetchStories,
  filterStoryLinks,
  generateStaticPathsV2,
} from '@/utils/storyblok'
import { getPageLocale } from '@/utils/storyblok/i18n'
import { storyHasContent } from '@/utils/storyblok/storyHasContent'
import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'
import { componentNames } from '../../storyblok.config.mjs'

export async function getStaticPaths() {
  const links = await fetchAllLinks()
  const validLinks = filterStoryLinks(links)
  // .sort((a, b) =>
  //   a.slug.localeCompare(b.slug),
  // )
  // console.log('----- â†“â†“â†“ links â†“â†“â†“ -----')
  // for (const link of validLinks) {
  //   console.log(`${link.slug} (${link.published})`)
  //   console.log(
  //     `     ${link.alternates.map((altern) => `${altern.lang} ${altern.translated_slug}`)}`,
  //   )
  // }
  // console.log('----- â†‘â†‘â†‘ links â†‘â†‘â†‘ -----')

  const paths = await generateStaticPathsV2(validLinks)
  // console.log('----- â†“â†“â†“ paths â†“â†“â†“ -----')
  // for (const path of paths) {
  //   console.log(path.params.slug)
  // }
  // console.log('----- â†‘â†‘â†‘ paths â†‘â†‘â†‘ -----')

  return paths
}

const isPreview = import.meta.env.PUBLIC_ENV === 'preview'

// console.log('Astro.params.slug', Astro.params.slug)
// @ts-ignore
const slug = Astro.params.slug
// @ts-ignore
let page = Astro.props.page
if (slug && isPreview && !page?.slug) {
  // const paths = await generateStaticPaths([
  //   {
  //     slug: Astro.params.slug,
  //   },
  // ])
  // page = paths[0].props?.page
  const pageProps = getPageLocale(slug)
  page = {
    ...pageProps,
    slug,
  }
}

let story
if (page) {
  try {
    // NOTE: fetchStories by full_slug is not working with translated slugs
    const query = {
      starts_with: page.sbSlug ?? '/',
      // language: page.sbLanguage,
    }
    const stories: any = await fetchStories(query)
    const [pageStory] = stories.filter(
      (story) =>
        story.full_slug === page.sbSlug ||
        story.full_slug === page.sbSlug + '/' ||
        story.full_slug + '/' === page.sbSlug,
    )

    if (
      pageStory.content &&
      componentNames.includes(pageStory.content?.component)
    ) {
      story = pageStory
    }
  } catch (error) {
    if (import.meta.env.DEV || import.meta.env.PUBLIC_ENV === 'preview') {
      console.warn('ERROR', page, JSON.stringify(error))
    }
  }
} else {
  if (import.meta.env.DEV || import.meta.env.PUBLIC_ENV === 'preview') {
    console.warn('NO PAGE', page)
  }
}
---

{
  !page && (
    <div class="flex min-h-svh items-center justify-center">
      <div class="rounded-lg bg-white p-10 font-mono drop-shadow">
        <p>Oh oh. No page was found.</p>
        <p>Reach out to your lazy developer.</p>
      </div>
    </div>
  )
}

{
  page && !storyHasContent(story) && (
    <div class="flex min-h-svh items-center justify-center ">
      <div class="rounded-lg bg-white p-10 font-mono drop-shadow">
        <p>Empty here. Time to add some content ðŸ‘‰</p>
      </div>
    </div>
  )
}
{
  story?.content && (
    <StoryblokComponent page={page} story={story} blok={story?.content} />
  )
}
